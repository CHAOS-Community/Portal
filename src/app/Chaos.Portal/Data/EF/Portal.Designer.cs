//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("PortalModel", "FK_UserSettings_ClientSettingsGUID_ClientSettings_GUID", "ClientSettings", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Chaos.Portal.Data.EF.ClientSettings), "UserSettings", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Chaos.Portal.Data.EF.UserSettings), true)]
[assembly: EdmRelationshipAttribute("PortalModel", "FK_Group_User_Join_GroupGUID_Group_GUID", "Group", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Chaos.Portal.Data.EF.Group), "Group_User_Join", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Chaos.Portal.Data.EF.Group_User_Join), true)]
[assembly: EdmRelationshipAttribute("PortalModel", "FK_Group_User_Join_UserGUID_User_GUID", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Chaos.Portal.Data.EF.User), "Group_User_Join", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Chaos.Portal.Data.EF.Group_User_Join), true)]
[assembly: EdmRelationshipAttribute("PortalModel", "FK_IndexSettings_ModuleID_Module_ID", "Module", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Chaos.Portal.Data.EF.Module), "IndexSettings", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Chaos.Portal.Data.EF.IndexSettings), true)]
[assembly: EdmRelationshipAttribute("PortalModel", "FK_Subscription_User_Join_SubscriptionGUID_Subscription_GUID", "Subscription", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Chaos.Portal.Data.EF.Subscription), "Subscription_User_Join", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Chaos.Portal.Data.EF.Subscription_User_Join), true)]
[assembly: EdmRelationshipAttribute("PortalModel", "FK_Subscription_User_Join_UserGUID_User_GUID", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Chaos.Portal.Data.EF.User), "Subscription_User_Join", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Chaos.Portal.Data.EF.Subscription_User_Join), true)]
[assembly: EdmRelationshipAttribute("PortalModel", "FK_Ticket_TicketTypeID_TicketType_ID", "TicketType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Chaos.Portal.Data.EF.TicketType), "Ticket", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Chaos.Portal.Data.EF.Ticket), true)]
[assembly: EdmRelationshipAttribute("PortalModel", "FK_UserSettings_UserGUID_User_GUID", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Chaos.Portal.Data.EF.User), "UserSettings", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Chaos.Portal.Data.EF.UserSettings), true)]

#endregion

namespace Chaos.Portal.Data.EF
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class PortalEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new PortalEntities object using the connection string found in the 'PortalEntities' section of the application configuration file.
        /// </summary>
        public PortalEntities() : base("name=PortalEntities", "PortalEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new PortalEntities object.
        /// </summary>
        public PortalEntities(string connectionString) : base(connectionString, "PortalEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new PortalEntities object.
        /// </summary>
        public PortalEntities(EntityConnection connection) : base(connection, "PortalEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ClientSettings> ClientSettings
        {
            get
            {
                if ((_ClientSettings == null))
                {
                    _ClientSettings = base.CreateObjectSet<ClientSettings>("ClientSettings");
                }
                return _ClientSettings;
            }
        }
        private ObjectSet<ClientSettings> _ClientSettings;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Group> Group
        {
            get
            {
                if ((_Group == null))
                {
                    _Group = base.CreateObjectSet<Group>("Group");
                }
                return _Group;
            }
        }
        private ObjectSet<Group> _Group;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Group_User_Join> Group_User_Join
        {
            get
            {
                if ((_Group_User_Join == null))
                {
                    _Group_User_Join = base.CreateObjectSet<Group_User_Join>("Group_User_Join");
                }
                return _Group_User_Join;
            }
        }
        private ObjectSet<Group_User_Join> _Group_User_Join;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<IndexSettings> IndexSettings
        {
            get
            {
                if ((_IndexSettings == null))
                {
                    _IndexSettings = base.CreateObjectSet<IndexSettings>("IndexSettings");
                }
                return _IndexSettings;
            }
        }
        private ObjectSet<IndexSettings> _IndexSettings;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Log> Log
        {
            get
            {
                if ((_Log == null))
                {
                    _Log = base.CreateObjectSet<Log>("Log");
                }
                return _Log;
            }
        }
        private ObjectSet<Log> _Log;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Module> Module
        {
            get
            {
                if ((_Module == null))
                {
                    _Module = base.CreateObjectSet<Module>("Module");
                }
                return _Module;
            }
        }
        private ObjectSet<Module> _Module;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Permission> Permission
        {
            get
            {
                if ((_Permission == null))
                {
                    _Permission = base.CreateObjectSet<Permission>("Permission");
                }
                return _Permission;
            }
        }
        private ObjectSet<Permission> _Permission;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Session> Session
        {
            get
            {
                if ((_Session == null))
                {
                    _Session = base.CreateObjectSet<Session>("Session");
                }
                return _Session;
            }
        }
        private ObjectSet<Session> _Session;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Subscription> Subscription
        {
            get
            {
                if ((_Subscription == null))
                {
                    _Subscription = base.CreateObjectSet<Subscription>("Subscription");
                }
                return _Subscription;
            }
        }
        private ObjectSet<Subscription> _Subscription;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Subscription_User_Join> Subscription_User_Join
        {
            get
            {
                if ((_Subscription_User_Join == null))
                {
                    _Subscription_User_Join = base.CreateObjectSet<Subscription_User_Join>("Subscription_User_Join");
                }
                return _Subscription_User_Join;
            }
        }
        private ObjectSet<Subscription_User_Join> _Subscription_User_Join;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Ticket> Ticket
        {
            get
            {
                if ((_Ticket == null))
                {
                    _Ticket = base.CreateObjectSet<Ticket>("Ticket");
                }
                return _Ticket;
            }
        }
        private ObjectSet<Ticket> _Ticket;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<TicketType> TicketType
        {
            get
            {
                if ((_TicketType == null))
                {
                    _TicketType = base.CreateObjectSet<TicketType>("TicketType");
                }
                return _TicketType;
            }
        }
        private ObjectSet<TicketType> _TicketType;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<User> User
        {
            get
            {
                if ((_User == null))
                {
                    _User = base.CreateObjectSet<User>("User");
                }
                return _User;
            }
        }
        private ObjectSet<User> _User;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<UserSettings> UserSettings
        {
            get
            {
                if ((_UserSettings == null))
                {
                    _UserSettings = base.CreateObjectSet<UserSettings>("UserSettings");
                }
                return _UserSettings;
            }
        }
        private ObjectSet<UserSettings> _UserSettings;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<SessionInfo> SessionInfo
        {
            get
            {
                if ((_SessionInfo == null))
                {
                    _SessionInfo = base.CreateObjectSet<SessionInfo>("SessionInfo");
                }
                return _SessionInfo;
            }
        }
        private ObjectSet<SessionInfo> _SessionInfo;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<SubscriptionInfo> SubscriptionInfo
        {
            get
            {
                if ((_SubscriptionInfo == null))
                {
                    _SubscriptionInfo = base.CreateObjectSet<SubscriptionInfo>("SubscriptionInfo");
                }
                return _SubscriptionInfo;
            }
        }
        private ObjectSet<SubscriptionInfo> _SubscriptionInfo;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<UserInfo> UserInfo
        {
            get
            {
                if ((_UserInfo == null))
                {
                    _UserInfo = base.CreateObjectSet<UserInfo>("UserInfo");
                }
                return _UserInfo;
            }
        }
        private ObjectSet<UserInfo> _UserInfo;

        #endregion

        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ClientSettings EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToClientSettings(ClientSettings clientSettings)
        {
            base.AddObject("ClientSettings", clientSettings);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Group EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToGroup(Group group)
        {
            base.AddObject("Group", group);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Group_User_Join EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToGroup_User_Join(Group_User_Join group_User_Join)
        {
            base.AddObject("Group_User_Join", group_User_Join);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the IndexSettings EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToIndexSettings(IndexSettings indexSettings)
        {
            base.AddObject("IndexSettings", indexSettings);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Log EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToLog(Log log)
        {
            base.AddObject("Log", log);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Module EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToModule(Module module)
        {
            base.AddObject("Module", module);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Permission EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPermission(Permission permission)
        {
            base.AddObject("Permission", permission);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Session EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSession(Session session)
        {
            base.AddObject("Session", session);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Subscription EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSubscription(Subscription subscription)
        {
            base.AddObject("Subscription", subscription);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Subscription_User_Join EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSubscription_User_Join(Subscription_User_Join subscription_User_Join)
        {
            base.AddObject("Subscription_User_Join", subscription_User_Join);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Ticket EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTicket(Ticket ticket)
        {
            base.AddObject("Ticket", ticket);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the TicketType EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTicketType(TicketType ticketType)
        {
            base.AddObject("TicketType", ticketType);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the User EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUser(User user)
        {
            base.AddObject("User", user);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the UserSettings EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUserSettings(UserSettings userSettings)
        {
            base.AddObject("UserSettings", userSettings);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the SessionInfo EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSessionInfo(SessionInfo sessionInfo)
        {
            base.AddObject("SessionInfo", sessionInfo);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the SubscriptionInfo EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSubscriptionInfo(SubscriptionInfo subscriptionInfo)
        {
            base.AddObject("SubscriptionInfo", subscriptionInfo);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the UserInfo EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUserInfo(UserInfo userInfo)
        {
            base.AddObject("UserInfo", userInfo);
        }

        #endregion

        #region Function Imports
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="gUID">No Metadata Documentation available.</param>
        public ObjectResult<ClientSettings> ClientSettings_Get(global::System.Byte[] gUID)
        {
            ObjectParameter gUIDParameter;
            if (gUID != null)
            {
                gUIDParameter = new ObjectParameter("GUID", gUID);
            }
            else
            {
                gUIDParameter = new ObjectParameter("GUID", typeof(global::System.Byte[]));
            }
    
            return base.ExecuteFunction<ClientSettings>("ClientSettings_Get", gUIDParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="gUID">No Metadata Documentation available.</param>
        public ObjectResult<ClientSettings> ClientSettings_Get(global::System.Byte[] gUID, MergeOption mergeOption)
        {
            ObjectParameter gUIDParameter;
            if (gUID != null)
            {
                gUIDParameter = new ObjectParameter("GUID", gUID);
            }
            else
            {
                gUIDParameter = new ObjectParameter("GUID", typeof(global::System.Byte[]));
            }
    
            return base.ExecuteFunction<ClientSettings>("ClientSettings_Get", mergeOption, gUIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="gUID">No Metadata Documentation available.</param>
        /// <param name="name">No Metadata Documentation available.</param>
        /// <param name="settings">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<global::System.Int32>> ClientSettings_Set(global::System.Byte[] gUID, global::System.String name, global::System.String settings)
        {
            ObjectParameter gUIDParameter;
            if (gUID != null)
            {
                gUIDParameter = new ObjectParameter("GUID", gUID);
            }
            else
            {
                gUIDParameter = new ObjectParameter("GUID", typeof(global::System.Byte[]));
            }
    
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            ObjectParameter settingsParameter;
            if (settings != null)
            {
                settingsParameter = new ObjectParameter("Settings", settings);
            }
            else
            {
                settingsParameter = new ObjectParameter("Settings", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Int32>>("ClientSettings_Set", gUIDParameter, nameParameter, settingsParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="groupGUID">No Metadata Documentation available.</param>
        /// <param name="userGUID">No Metadata Documentation available.</param>
        /// <param name="permission">No Metadata Documentation available.</param>
        /// <param name="requestUserGUID">No Metadata Documentation available.</param>
        /// <param name="errorCode">No Metadata Documentation available.</param>
        public int Group_AssociateWithUser(global::System.Byte[] groupGUID, global::System.Byte[] userGUID, Nullable<global::System.Int32> permission, global::System.Byte[] requestUserGUID, ObjectParameter errorCode)
        {
            ObjectParameter groupGUIDParameter;
            if (groupGUID != null)
            {
                groupGUIDParameter = new ObjectParameter("GroupGUID", groupGUID);
            }
            else
            {
                groupGUIDParameter = new ObjectParameter("GroupGUID", typeof(global::System.Byte[]));
            }
    
            ObjectParameter userGUIDParameter;
            if (userGUID != null)
            {
                userGUIDParameter = new ObjectParameter("UserGUID", userGUID);
            }
            else
            {
                userGUIDParameter = new ObjectParameter("UserGUID", typeof(global::System.Byte[]));
            }
    
            ObjectParameter permissionParameter;
            if (permission.HasValue)
            {
                permissionParameter = new ObjectParameter("Permission", permission);
            }
            else
            {
                permissionParameter = new ObjectParameter("Permission", typeof(global::System.Int32));
            }
    
            ObjectParameter requestUserGUIDParameter;
            if (requestUserGUID != null)
            {
                requestUserGUIDParameter = new ObjectParameter("RequestUserGUID", requestUserGUID);
            }
            else
            {
                requestUserGUIDParameter = new ObjectParameter("RequestUserGUID", typeof(global::System.Byte[]));
            }
    
            return base.ExecuteFunction("Group_AssociateWithUser", groupGUIDParameter, userGUIDParameter, permissionParameter, requestUserGUIDParameter, errorCode);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="gUID">No Metadata Documentation available.</param>
        /// <param name="name">No Metadata Documentation available.</param>
        /// <param name="requestUserGUID">No Metadata Documentation available.</param>
        /// <param name="systemPermission">No Metadata Documentation available.</param>
        /// <param name="errorCode">No Metadata Documentation available.</param>
        public int Group_Create(global::System.Byte[] gUID, global::System.String name, global::System.Byte[] requestUserGUID, Nullable<global::System.Int32> systemPermission, ObjectParameter errorCode)
        {
            ObjectParameter gUIDParameter;
            if (gUID != null)
            {
                gUIDParameter = new ObjectParameter("GUID", gUID);
            }
            else
            {
                gUIDParameter = new ObjectParameter("GUID", typeof(global::System.Byte[]));
            }
    
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            ObjectParameter requestUserGUIDParameter;
            if (requestUserGUID != null)
            {
                requestUserGUIDParameter = new ObjectParameter("RequestUserGUID", requestUserGUID);
            }
            else
            {
                requestUserGUIDParameter = new ObjectParameter("RequestUserGUID", typeof(global::System.Byte[]));
            }
    
            ObjectParameter systemPermissionParameter;
            if (systemPermission.HasValue)
            {
                systemPermissionParameter = new ObjectParameter("SystemPermission", systemPermission);
            }
            else
            {
                systemPermissionParameter = new ObjectParameter("SystemPermission", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction("Group_Create", gUIDParameter, nameParameter, requestUserGUIDParameter, systemPermissionParameter, errorCode);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="gUID">No Metadata Documentation available.</param>
        /// <param name="userGUID">No Metadata Documentation available.</param>
        /// <param name="errorCode">No Metadata Documentation available.</param>
        public int Group_Delete(global::System.Byte[] gUID, global::System.Byte[] userGUID, ObjectParameter errorCode)
        {
            ObjectParameter gUIDParameter;
            if (gUID != null)
            {
                gUIDParameter = new ObjectParameter("GUID", gUID);
            }
            else
            {
                gUIDParameter = new ObjectParameter("GUID", typeof(global::System.Byte[]));
            }
    
            ObjectParameter userGUIDParameter;
            if (userGUID != null)
            {
                userGUIDParameter = new ObjectParameter("UserGUID", userGUID);
            }
            else
            {
                userGUIDParameter = new ObjectParameter("UserGUID", typeof(global::System.Byte[]));
            }
    
            return base.ExecuteFunction("Group_Delete", gUIDParameter, userGUIDParameter, errorCode);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="gUID">No Metadata Documentation available.</param>
        /// <param name="name">No Metadata Documentation available.</param>
        /// <param name="requestUserGUID">No Metadata Documentation available.</param>
        public ObjectResult<Group> Group_Get(global::System.Byte[] gUID, global::System.String name, global::System.Byte[] requestUserGUID)
        {
            ObjectParameter gUIDParameter;
            if (gUID != null)
            {
                gUIDParameter = new ObjectParameter("GUID", gUID);
            }
            else
            {
                gUIDParameter = new ObjectParameter("GUID", typeof(global::System.Byte[]));
            }
    
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            ObjectParameter requestUserGUIDParameter;
            if (requestUserGUID != null)
            {
                requestUserGUIDParameter = new ObjectParameter("RequestUserGUID", requestUserGUID);
            }
            else
            {
                requestUserGUIDParameter = new ObjectParameter("RequestUserGUID", typeof(global::System.Byte[]));
            }
    
            return base.ExecuteFunction<Group>("Group_Get", gUIDParameter, nameParameter, requestUserGUIDParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="gUID">No Metadata Documentation available.</param>
        /// <param name="name">No Metadata Documentation available.</param>
        /// <param name="requestUserGUID">No Metadata Documentation available.</param>
        public ObjectResult<Group> Group_Get(global::System.Byte[] gUID, global::System.String name, global::System.Byte[] requestUserGUID, MergeOption mergeOption)
        {
            ObjectParameter gUIDParameter;
            if (gUID != null)
            {
                gUIDParameter = new ObjectParameter("GUID", gUID);
            }
            else
            {
                gUIDParameter = new ObjectParameter("GUID", typeof(global::System.Byte[]));
            }
    
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            ObjectParameter requestUserGUIDParameter;
            if (requestUserGUID != null)
            {
                requestUserGUIDParameter = new ObjectParameter("RequestUserGUID", requestUserGUID);
            }
            else
            {
                requestUserGUIDParameter = new ObjectParameter("RequestUserGUID", typeof(global::System.Byte[]));
            }
    
            return base.ExecuteFunction<Group>("Group_Get", mergeOption, gUIDParameter, nameParameter, requestUserGUIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="newName">No Metadata Documentation available.</param>
        /// <param name="newSystemPermission">No Metadata Documentation available.</param>
        /// <param name="whereGroupGUID">No Metadata Documentation available.</param>
        /// <param name="requestUserGUID">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<global::System.Int32>> Group_Update(global::System.String newName, Nullable<global::System.Int32> newSystemPermission, global::System.Byte[] whereGroupGUID, global::System.Byte[] requestUserGUID)
        {
            ObjectParameter newNameParameter;
            if (newName != null)
            {
                newNameParameter = new ObjectParameter("NewName", newName);
            }
            else
            {
                newNameParameter = new ObjectParameter("NewName", typeof(global::System.String));
            }
    
            ObjectParameter newSystemPermissionParameter;
            if (newSystemPermission.HasValue)
            {
                newSystemPermissionParameter = new ObjectParameter("NewSystemPermission", newSystemPermission);
            }
            else
            {
                newSystemPermissionParameter = new ObjectParameter("NewSystemPermission", typeof(global::System.Int32));
            }
    
            ObjectParameter whereGroupGUIDParameter;
            if (whereGroupGUID != null)
            {
                whereGroupGUIDParameter = new ObjectParameter("WhereGroupGUID", whereGroupGUID);
            }
            else
            {
                whereGroupGUIDParameter = new ObjectParameter("WhereGroupGUID", typeof(global::System.Byte[]));
            }
    
            ObjectParameter requestUserGUIDParameter;
            if (requestUserGUID != null)
            {
                requestUserGUIDParameter = new ObjectParameter("RequestUserGUID", requestUserGUID);
            }
            else
            {
                requestUserGUIDParameter = new ObjectParameter("RequestUserGUID", typeof(global::System.Byte[]));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Int32>>("Group_Update", newNameParameter, newSystemPermissionParameter, whereGroupGUIDParameter, requestUserGUIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="iD">No Metadata Documentation available.</param>
        /// <param name="moduleID">No Metadata Documentation available.</param>
        /// <param name="settings">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<global::System.Int32>> IndexSettings_Create(Nullable<global::System.Int32> iD, Nullable<global::System.Int32> moduleID, global::System.String settings)
        {
            ObjectParameter iDParameter;
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(global::System.Int32));
            }
    
            ObjectParameter moduleIDParameter;
            if (moduleID.HasValue)
            {
                moduleIDParameter = new ObjectParameter("ModuleID", moduleID);
            }
            else
            {
                moduleIDParameter = new ObjectParameter("ModuleID", typeof(global::System.Int32));
            }
    
            ObjectParameter settingsParameter;
            if (settings != null)
            {
                settingsParameter = new ObjectParameter("Settings", settings);
            }
            else
            {
                settingsParameter = new ObjectParameter("Settings", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Int32>>("IndexSettings_Create", iDParameter, moduleIDParameter, settingsParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="moduleID">No Metadata Documentation available.</param>
        public ObjectResult<IndexSettings> IndexSettings_Get(Nullable<global::System.Int32> moduleID)
        {
            ObjectParameter moduleIDParameter;
            if (moduleID.HasValue)
            {
                moduleIDParameter = new ObjectParameter("ModuleID", moduleID);
            }
            else
            {
                moduleIDParameter = new ObjectParameter("ModuleID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<IndexSettings>("IndexSettings_Get", moduleIDParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="moduleID">No Metadata Documentation available.</param>
        public ObjectResult<IndexSettings> IndexSettings_Get(Nullable<global::System.Int32> moduleID, MergeOption mergeOption)
        {
            ObjectParameter moduleIDParameter;
            if (moduleID.HasValue)
            {
                moduleIDParameter = new ObjectParameter("ModuleID", moduleID);
            }
            else
            {
                moduleIDParameter = new ObjectParameter("ModuleID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<IndexSettings>("IndexSettings_Get", mergeOption, moduleIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="name">No Metadata Documentation available.</param>
        /// <param name="level">No Metadata Documentation available.</param>
        /// <param name="sessionGUID">No Metadata Documentation available.</param>
        /// <param name="duration">No Metadata Documentation available.</param>
        /// <param name="message">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<global::System.Int32>> Log_Create(global::System.String name, global::System.String level, global::System.Byte[] sessionGUID, Nullable<global::System.Double> duration, global::System.String message)
        {
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            ObjectParameter levelParameter;
            if (level != null)
            {
                levelParameter = new ObjectParameter("Level", level);
            }
            else
            {
                levelParameter = new ObjectParameter("Level", typeof(global::System.String));
            }
    
            ObjectParameter sessionGUIDParameter;
            if (sessionGUID != null)
            {
                sessionGUIDParameter = new ObjectParameter("SessionGUID", sessionGUID);
            }
            else
            {
                sessionGUIDParameter = new ObjectParameter("SessionGUID", typeof(global::System.Byte[]));
            }
    
            ObjectParameter durationParameter;
            if (duration.HasValue)
            {
                durationParameter = new ObjectParameter("Duration", duration);
            }
            else
            {
                durationParameter = new ObjectParameter("Duration", typeof(global::System.Double));
            }
    
            ObjectParameter messageParameter;
            if (message != null)
            {
                messageParameter = new ObjectParameter("Message", message);
            }
            else
            {
                messageParameter = new ObjectParameter("Message", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Int32>>("Log_Create", nameParameter, levelParameter, sessionGUIDParameter, durationParameter, messageParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="iD">No Metadata Documentation available.</param>
        /// <param name="name">No Metadata Documentation available.</param>
        /// <param name="configuration">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<global::System.Int32>> Module_Create(Nullable<global::System.Int32> iD, global::System.String name, global::System.String configuration)
        {
            ObjectParameter iDParameter;
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(global::System.Int32));
            }
    
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            ObjectParameter configurationParameter;
            if (configuration != null)
            {
                configurationParameter = new ObjectParameter("Configuration", configuration);
            }
            else
            {
                configurationParameter = new ObjectParameter("Configuration", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Int32>>("Module_Create", iDParameter, nameParameter, configurationParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="iD">No Metadata Documentation available.</param>
        /// <param name="name">No Metadata Documentation available.</param>
        public ObjectResult<Module> Module_Get(Nullable<global::System.Int32> iD, global::System.String name)
        {
            ObjectParameter iDParameter;
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(global::System.Int32));
            }
    
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Module>("Module_Get", iDParameter, nameParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="iD">No Metadata Documentation available.</param>
        /// <param name="name">No Metadata Documentation available.</param>
        public ObjectResult<Module> Module_Get(Nullable<global::System.Int32> iD, global::System.String name, MergeOption mergeOption)
        {
            ObjectParameter iDParameter;
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(global::System.Int32));
            }
    
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Module>("Module_Get", mergeOption, iDParameter, nameParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="sessionGUID">No Metadata Documentation available.</param>
        /// <param name="userGUID">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<global::System.Int32>> Session_Create(global::System.Byte[] sessionGUID, global::System.Byte[] userGUID)
        {
            ObjectParameter sessionGUIDParameter;
            if (sessionGUID != null)
            {
                sessionGUIDParameter = new ObjectParameter("SessionGUID", sessionGUID);
            }
            else
            {
                sessionGUIDParameter = new ObjectParameter("SessionGUID", typeof(global::System.Byte[]));
            }
    
            ObjectParameter userGUIDParameter;
            if (userGUID != null)
            {
                userGUIDParameter = new ObjectParameter("UserGUID", userGUID);
            }
            else
            {
                userGUIDParameter = new ObjectParameter("UserGUID", typeof(global::System.Byte[]));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Int32>>("Session_Create", sessionGUIDParameter, userGUIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="sessionGUID">No Metadata Documentation available.</param>
        /// <param name="userGUID">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<global::System.Int32>> Session_Delete(global::System.Byte[] sessionGUID, global::System.Byte[] userGUID)
        {
            ObjectParameter sessionGUIDParameter;
            if (sessionGUID != null)
            {
                sessionGUIDParameter = new ObjectParameter("SessionGUID", sessionGUID);
            }
            else
            {
                sessionGUIDParameter = new ObjectParameter("SessionGUID", typeof(global::System.Byte[]));
            }
    
            ObjectParameter userGUIDParameter;
            if (userGUID != null)
            {
                userGUIDParameter = new ObjectParameter("UserGUID", userGUID);
            }
            else
            {
                userGUIDParameter = new ObjectParameter("UserGUID", typeof(global::System.Byte[]));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Int32>>("Session_Delete", sessionGUIDParameter, userGUIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="sessionGUID">No Metadata Documentation available.</param>
        /// <param name="userGUID">No Metadata Documentation available.</param>
        public ObjectResult<Session> Session_Get(global::System.Byte[] sessionGUID, global::System.Byte[] userGUID)
        {
            ObjectParameter sessionGUIDParameter;
            if (sessionGUID != null)
            {
                sessionGUIDParameter = new ObjectParameter("SessionGUID", sessionGUID);
            }
            else
            {
                sessionGUIDParameter = new ObjectParameter("SessionGUID", typeof(global::System.Byte[]));
            }
    
            ObjectParameter userGUIDParameter;
            if (userGUID != null)
            {
                userGUIDParameter = new ObjectParameter("UserGUID", userGUID);
            }
            else
            {
                userGUIDParameter = new ObjectParameter("UserGUID", typeof(global::System.Byte[]));
            }
    
            return base.ExecuteFunction<Session>("Session_Get", sessionGUIDParameter, userGUIDParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="sessionGUID">No Metadata Documentation available.</param>
        /// <param name="userGUID">No Metadata Documentation available.</param>
        public ObjectResult<Session> Session_Get(global::System.Byte[] sessionGUID, global::System.Byte[] userGUID, MergeOption mergeOption)
        {
            ObjectParameter sessionGUIDParameter;
            if (sessionGUID != null)
            {
                sessionGUIDParameter = new ObjectParameter("SessionGUID", sessionGUID);
            }
            else
            {
                sessionGUIDParameter = new ObjectParameter("SessionGUID", typeof(global::System.Byte[]));
            }
    
            ObjectParameter userGUIDParameter;
            if (userGUID != null)
            {
                userGUIDParameter = new ObjectParameter("UserGUID", userGUID);
            }
            else
            {
                userGUIDParameter = new ObjectParameter("UserGUID", typeof(global::System.Byte[]));
            }
    
            return base.ExecuteFunction<Session>("Session_Get", mergeOption, sessionGUIDParameter, userGUIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userGUID">No Metadata Documentation available.</param>
        /// <param name="whereSessionGUID">No Metadata Documentation available.</param>
        /// <param name="whereUserGUID">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<global::System.Int32>> Session_Update(global::System.Byte[] userGUID, global::System.Byte[] whereSessionGUID, global::System.Byte[] whereUserGUID)
        {
            ObjectParameter userGUIDParameter;
            if (userGUID != null)
            {
                userGUIDParameter = new ObjectParameter("UserGUID", userGUID);
            }
            else
            {
                userGUIDParameter = new ObjectParameter("UserGUID", typeof(global::System.Byte[]));
            }
    
            ObjectParameter whereSessionGUIDParameter;
            if (whereSessionGUID != null)
            {
                whereSessionGUIDParameter = new ObjectParameter("WhereSessionGUID", whereSessionGUID);
            }
            else
            {
                whereSessionGUIDParameter = new ObjectParameter("WhereSessionGUID", typeof(global::System.Byte[]));
            }
    
            ObjectParameter whereUserGUIDParameter;
            if (whereUserGUID != null)
            {
                whereUserGUIDParameter = new ObjectParameter("WhereUserGUID", whereUserGUID);
            }
            else
            {
                whereUserGUIDParameter = new ObjectParameter("WhereUserGUID", typeof(global::System.Byte[]));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Int32>>("Session_Update", userGUIDParameter, whereSessionGUIDParameter, whereUserGUIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="gUID">No Metadata Documentation available.</param>
        /// <param name="requestUserGUID">No Metadata Documentation available.</param>
        public ObjectResult<SubscriptionInfo> SubscriptionInfo_Get(global::System.Byte[] gUID, global::System.Byte[] requestUserGUID)
        {
            ObjectParameter gUIDParameter;
            if (gUID != null)
            {
                gUIDParameter = new ObjectParameter("GUID", gUID);
            }
            else
            {
                gUIDParameter = new ObjectParameter("GUID", typeof(global::System.Byte[]));
            }
    
            ObjectParameter requestUserGUIDParameter;
            if (requestUserGUID != null)
            {
                requestUserGUIDParameter = new ObjectParameter("RequestUserGUID", requestUserGUID);
            }
            else
            {
                requestUserGUIDParameter = new ObjectParameter("RequestUserGUID", typeof(global::System.Byte[]));
            }
    
            return base.ExecuteFunction<SubscriptionInfo>("SubscriptionInfo_Get", gUIDParameter, requestUserGUIDParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="gUID">No Metadata Documentation available.</param>
        /// <param name="requestUserGUID">No Metadata Documentation available.</param>
        public ObjectResult<SubscriptionInfo> SubscriptionInfo_Get(global::System.Byte[] gUID, global::System.Byte[] requestUserGUID, MergeOption mergeOption)
        {
            ObjectParameter gUIDParameter;
            if (gUID != null)
            {
                gUIDParameter = new ObjectParameter("GUID", gUID);
            }
            else
            {
                gUIDParameter = new ObjectParameter("GUID", typeof(global::System.Byte[]));
            }
    
            ObjectParameter requestUserGUIDParameter;
            if (requestUserGUID != null)
            {
                requestUserGUIDParameter = new ObjectParameter("RequestUserGUID", requestUserGUID);
            }
            else
            {
                requestUserGUIDParameter = new ObjectParameter("RequestUserGUID", typeof(global::System.Byte[]));
            }
    
            return base.ExecuteFunction<SubscriptionInfo>("SubscriptionInfo_Get", mergeOption, gUIDParameter, requestUserGUIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="gUID">No Metadata Documentation available.</param>
        /// <param name="name">No Metadata Documentation available.</param>
        /// <param name="requestUserGUID">No Metadata Documentation available.</param>
        /// <param name="errorCode">No Metadata Documentation available.</param>
        public int Subscription_Create(global::System.Byte[] gUID, global::System.String name, global::System.Byte[] requestUserGUID, ObjectParameter errorCode)
        {
            ObjectParameter gUIDParameter;
            if (gUID != null)
            {
                gUIDParameter = new ObjectParameter("GUID", gUID);
            }
            else
            {
                gUIDParameter = new ObjectParameter("GUID", typeof(global::System.Byte[]));
            }
    
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            ObjectParameter requestUserGUIDParameter;
            if (requestUserGUID != null)
            {
                requestUserGUIDParameter = new ObjectParameter("RequestUserGUID", requestUserGUID);
            }
            else
            {
                requestUserGUIDParameter = new ObjectParameter("RequestUserGUID", typeof(global::System.Byte[]));
            }
    
            return base.ExecuteFunction("Subscription_Create", gUIDParameter, nameParameter, requestUserGUIDParameter, errorCode);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="subscriptionGUID">No Metadata Documentation available.</param>
        /// <param name="requestUserGUID">No Metadata Documentation available.</param>
        /// <param name="errorCode">No Metadata Documentation available.</param>
        public int Subscription_Delete(global::System.Byte[] subscriptionGUID, global::System.Byte[] requestUserGUID, ObjectParameter errorCode)
        {
            ObjectParameter subscriptionGUIDParameter;
            if (subscriptionGUID != null)
            {
                subscriptionGUIDParameter = new ObjectParameter("SubscriptionGUID", subscriptionGUID);
            }
            else
            {
                subscriptionGUIDParameter = new ObjectParameter("SubscriptionGUID", typeof(global::System.Byte[]));
            }
    
            ObjectParameter requestUserGUIDParameter;
            if (requestUserGUID != null)
            {
                requestUserGUIDParameter = new ObjectParameter("RequestUserGUID", requestUserGUID);
            }
            else
            {
                requestUserGUIDParameter = new ObjectParameter("RequestUserGUID", typeof(global::System.Byte[]));
            }
    
            return base.ExecuteFunction("Subscription_Delete", subscriptionGUIDParameter, requestUserGUIDParameter, errorCode);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="gUID">No Metadata Documentation available.</param>
        /// <param name="newName">No Metadata Documentation available.</param>
        /// <param name="requestUserGUID">No Metadata Documentation available.</param>
        /// <param name="errorCode">No Metadata Documentation available.</param>
        public int Subscription_Update(global::System.Byte[] gUID, global::System.String newName, global::System.Byte[] requestUserGUID, ObjectParameter errorCode)
        {
            ObjectParameter gUIDParameter;
            if (gUID != null)
            {
                gUIDParameter = new ObjectParameter("GUID", gUID);
            }
            else
            {
                gUIDParameter = new ObjectParameter("GUID", typeof(global::System.Byte[]));
            }
    
            ObjectParameter newNameParameter;
            if (newName != null)
            {
                newNameParameter = new ObjectParameter("NewName", newName);
            }
            else
            {
                newNameParameter = new ObjectParameter("NewName", typeof(global::System.String));
            }
    
            ObjectParameter requestUserGUIDParameter;
            if (requestUserGUID != null)
            {
                requestUserGUIDParameter = new ObjectParameter("RequestUserGUID", requestUserGUID);
            }
            else
            {
                requestUserGUIDParameter = new ObjectParameter("RequestUserGUID", typeof(global::System.Byte[]));
            }
    
            return base.ExecuteFunction("Subscription_Update", gUIDParameter, newNameParameter, requestUserGUIDParameter, errorCode);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="gUID">No Metadata Documentation available.</param>
        /// <param name="ticketTypeID">No Metadata Documentation available.</param>
        /// <param name="xML">No Metadata Documentation available.</param>
        /// <param name="callback">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<global::System.Int32>> Ticket_Create(global::System.Byte[] gUID, Nullable<global::System.Int32> ticketTypeID, global::System.String xML, global::System.String callback)
        {
            ObjectParameter gUIDParameter;
            if (gUID != null)
            {
                gUIDParameter = new ObjectParameter("GUID", gUID);
            }
            else
            {
                gUIDParameter = new ObjectParameter("GUID", typeof(global::System.Byte[]));
            }
    
            ObjectParameter ticketTypeIDParameter;
            if (ticketTypeID.HasValue)
            {
                ticketTypeIDParameter = new ObjectParameter("TicketTypeID", ticketTypeID);
            }
            else
            {
                ticketTypeIDParameter = new ObjectParameter("TicketTypeID", typeof(global::System.Int32));
            }
    
            ObjectParameter xMLParameter;
            if (xML != null)
            {
                xMLParameter = new ObjectParameter("XML", xML);
            }
            else
            {
                xMLParameter = new ObjectParameter("XML", typeof(global::System.String));
            }
    
            ObjectParameter callbackParameter;
            if (callback != null)
            {
                callbackParameter = new ObjectParameter("Callback", callback);
            }
            else
            {
                callbackParameter = new ObjectParameter("Callback", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Int32>>("Ticket_Create", gUIDParameter, ticketTypeIDParameter, xMLParameter, callbackParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="gUID">No Metadata Documentation available.</param>
        public ObjectResult<Ticket> Ticket_Get(global::System.Byte[] gUID)
        {
            ObjectParameter gUIDParameter;
            if (gUID != null)
            {
                gUIDParameter = new ObjectParameter("GUID", gUID);
            }
            else
            {
                gUIDParameter = new ObjectParameter("GUID", typeof(global::System.Byte[]));
            }
    
            return base.ExecuteFunction<Ticket>("Ticket_Get", gUIDParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="gUID">No Metadata Documentation available.</param>
        public ObjectResult<Ticket> Ticket_Get(global::System.Byte[] gUID, MergeOption mergeOption)
        {
            ObjectParameter gUIDParameter;
            if (gUID != null)
            {
                gUIDParameter = new ObjectParameter("GUID", gUID);
            }
            else
            {
                gUIDParameter = new ObjectParameter("GUID", typeof(global::System.Byte[]));
            }
    
            return base.ExecuteFunction<Ticket>("Ticket_Get", mergeOption, gUIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="whereGUID">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<global::System.Int32>> Ticket_Use(global::System.Byte[] whereGUID)
        {
            ObjectParameter whereGUIDParameter;
            if (whereGUID != null)
            {
                whereGUIDParameter = new ObjectParameter("WhereGUID", whereGUID);
            }
            else
            {
                whereGUIDParameter = new ObjectParameter("WhereGUID", typeof(global::System.Byte[]));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Int32>>("Ticket_Use", whereGUIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="gUID">No Metadata Documentation available.</param>
        /// <param name="email">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<global::System.Int32>> User_Create(global::System.Byte[] gUID, global::System.String email)
        {
            ObjectParameter gUIDParameter;
            if (gUID != null)
            {
                gUIDParameter = new ObjectParameter("GUID", gUID);
            }
            else
            {
                gUIDParameter = new ObjectParameter("GUID", typeof(global::System.Byte[]));
            }
    
            ObjectParameter emailParameter;
            if (email != null)
            {
                emailParameter = new ObjectParameter("Email", email);
            }
            else
            {
                emailParameter = new ObjectParameter("Email", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Int32>>("User_Create", gUIDParameter, emailParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="gUID">No Metadata Documentation available.</param>
        public ObjectResult<User> User_Get(global::System.Byte[] gUID)
        {
            ObjectParameter gUIDParameter;
            if (gUID != null)
            {
                gUIDParameter = new ObjectParameter("GUID", gUID);
            }
            else
            {
                gUIDParameter = new ObjectParameter("GUID", typeof(global::System.Byte[]));
            }
    
            return base.ExecuteFunction<User>("User_Get", gUIDParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="gUID">No Metadata Documentation available.</param>
        public ObjectResult<User> User_Get(global::System.Byte[] gUID, MergeOption mergeOption)
        {
            ObjectParameter gUIDParameter;
            if (gUID != null)
            {
                gUIDParameter = new ObjectParameter("GUID", gUID);
            }
            else
            {
                gUIDParameter = new ObjectParameter("GUID", typeof(global::System.Byte[]));
            }
    
            return base.ExecuteFunction<User>("User_Get", mergeOption, gUIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="gUID">No Metadata Documentation available.</param>
        /// <param name="sessionGUID">No Metadata Documentation available.</param>
        /// <param name="email">No Metadata Documentation available.</param>
        public ObjectResult<UserInfo> UserInfo_Get(global::System.Byte[] gUID, global::System.Byte[] sessionGUID, global::System.String email)
        {
            ObjectParameter gUIDParameter;
            if (gUID != null)
            {
                gUIDParameter = new ObjectParameter("GUID", gUID);
            }
            else
            {
                gUIDParameter = new ObjectParameter("GUID", typeof(global::System.Byte[]));
            }
    
            ObjectParameter sessionGUIDParameter;
            if (sessionGUID != null)
            {
                sessionGUIDParameter = new ObjectParameter("SessionGUID", sessionGUID);
            }
            else
            {
                sessionGUIDParameter = new ObjectParameter("SessionGUID", typeof(global::System.Byte[]));
            }
    
            ObjectParameter emailParameter;
            if (email != null)
            {
                emailParameter = new ObjectParameter("Email", email);
            }
            else
            {
                emailParameter = new ObjectParameter("Email", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<UserInfo>("UserInfo_Get", gUIDParameter, sessionGUIDParameter, emailParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="gUID">No Metadata Documentation available.</param>
        /// <param name="sessionGUID">No Metadata Documentation available.</param>
        /// <param name="email">No Metadata Documentation available.</param>
        public ObjectResult<UserInfo> UserInfo_Get(global::System.Byte[] gUID, global::System.Byte[] sessionGUID, global::System.String email, MergeOption mergeOption)
        {
            ObjectParameter gUIDParameter;
            if (gUID != null)
            {
                gUIDParameter = new ObjectParameter("GUID", gUID);
            }
            else
            {
                gUIDParameter = new ObjectParameter("GUID", typeof(global::System.Byte[]));
            }
    
            ObjectParameter sessionGUIDParameter;
            if (sessionGUID != null)
            {
                sessionGUIDParameter = new ObjectParameter("SessionGUID", sessionGUID);
            }
            else
            {
                sessionGUIDParameter = new ObjectParameter("SessionGUID", typeof(global::System.Byte[]));
            }
    
            ObjectParameter emailParameter;
            if (email != null)
            {
                emailParameter = new ObjectParameter("Email", email);
            }
            else
            {
                emailParameter = new ObjectParameter("Email", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<UserInfo>("UserInfo_Get", mergeOption, gUIDParameter, sessionGUIDParameter, emailParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="clientSettingsGUID">No Metadata Documentation available.</param>
        /// <param name="userGUID">No Metadata Documentation available.</param>
        /// <param name="settings">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<global::System.Int32>> UserSettings_Set(global::System.Byte[] clientSettingsGUID, global::System.Byte[] userGUID, global::System.String settings)
        {
            ObjectParameter clientSettingsGUIDParameter;
            if (clientSettingsGUID != null)
            {
                clientSettingsGUIDParameter = new ObjectParameter("ClientSettingsGUID", clientSettingsGUID);
            }
            else
            {
                clientSettingsGUIDParameter = new ObjectParameter("ClientSettingsGUID", typeof(global::System.Byte[]));
            }
    
            ObjectParameter userGUIDParameter;
            if (userGUID != null)
            {
                userGUIDParameter = new ObjectParameter("UserGUID", userGUID);
            }
            else
            {
                userGUIDParameter = new ObjectParameter("UserGUID", typeof(global::System.Byte[]));
            }
    
            ObjectParameter settingsParameter;
            if (settings != null)
            {
                settingsParameter = new ObjectParameter("Settings", settings);
            }
            else
            {
                settingsParameter = new ObjectParameter("Settings", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Int32>>("UserSettings_Set", clientSettingsGUIDParameter, userGUIDParameter, settingsParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="clientSettingsGUID">No Metadata Documentation available.</param>
        /// <param name="userGUID">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<global::System.Int32>> UserSettings_Delete(global::System.Byte[] clientSettingsGUID, global::System.Byte[] userGUID)
        {
            ObjectParameter clientSettingsGUIDParameter;
            if (clientSettingsGUID != null)
            {
                clientSettingsGUIDParameter = new ObjectParameter("ClientSettingsGUID", clientSettingsGUID);
            }
            else
            {
                clientSettingsGUIDParameter = new ObjectParameter("ClientSettingsGUID", typeof(global::System.Byte[]));
            }
    
            ObjectParameter userGUIDParameter;
            if (userGUID != null)
            {
                userGUIDParameter = new ObjectParameter("UserGUID", userGUID);
            }
            else
            {
                userGUIDParameter = new ObjectParameter("UserGUID", typeof(global::System.Byte[]));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Int32>>("UserSettings_Delete", clientSettingsGUIDParameter, userGUIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="clientSettingsGUID">No Metadata Documentation available.</param>
        /// <param name="userGUID">No Metadata Documentation available.</param>
        public ObjectResult<UserSettings> UserSettings_Get(global::System.Byte[] clientSettingsGUID, global::System.Byte[] userGUID)
        {
            ObjectParameter clientSettingsGUIDParameter;
            if (clientSettingsGUID != null)
            {
                clientSettingsGUIDParameter = new ObjectParameter("ClientSettingsGUID", clientSettingsGUID);
            }
            else
            {
                clientSettingsGUIDParameter = new ObjectParameter("ClientSettingsGUID", typeof(global::System.Byte[]));
            }
    
            ObjectParameter userGUIDParameter;
            if (userGUID != null)
            {
                userGUIDParameter = new ObjectParameter("UserGUID", userGUID);
            }
            else
            {
                userGUIDParameter = new ObjectParameter("UserGUID", typeof(global::System.Byte[]));
            }
    
            return base.ExecuteFunction<UserSettings>("UserSettings_Get", clientSettingsGUIDParameter, userGUIDParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="clientSettingsGUID">No Metadata Documentation available.</param>
        /// <param name="userGUID">No Metadata Documentation available.</param>
        public ObjectResult<UserSettings> UserSettings_Get(global::System.Byte[] clientSettingsGUID, global::System.Byte[] userGUID, MergeOption mergeOption)
        {
            ObjectParameter clientSettingsGUIDParameter;
            if (clientSettingsGUID != null)
            {
                clientSettingsGUIDParameter = new ObjectParameter("ClientSettingsGUID", clientSettingsGUID);
            }
            else
            {
                clientSettingsGUIDParameter = new ObjectParameter("ClientSettingsGUID", typeof(global::System.Byte[]));
            }
    
            ObjectParameter userGUIDParameter;
            if (userGUID != null)
            {
                userGUIDParameter = new ObjectParameter("UserGUID", userGUID);
            }
            else
            {
                userGUIDParameter = new ObjectParameter("UserGUID", typeof(global::System.Byte[]));
            }
    
            return base.ExecuteFunction<UserSettings>("UserSettings_Get", mergeOption, clientSettingsGUIDParameter, userGUIDParameter);
        }

        #endregion

    }

    #endregion

    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="PortalModel", Name="ClientSettings")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ClientSettings : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new ClientSettings object.
        /// </summary>
        /// <param name="gUID">Initial value of the GUID property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="dateCreated">Initial value of the DateCreated property.</param>
        public static ClientSettings CreateClientSettings(global::System.Guid gUID, global::System.String name, global::System.DateTime dateCreated)
        {
            ClientSettings clientSettings = new ClientSettings();
            clientSettings.GUID = gUID;
            clientSettings.Name = name;
            clientSettings.DateCreated = dateCreated;
            return clientSettings;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid GUID
        {
            get
            {
                return _GUID;
            }
            set
            {
                if (_GUID != value)
                {
                    OnGUIDChanging(value);
                    ReportPropertyChanging("GUID");
                    _GUID = StructuralObject.SetValidValue(value, "GUID");
                    ReportPropertyChanged("GUID");
                    OnGUIDChanged();
                }
            }
        }
        private global::System.Guid _GUID;
        partial void OnGUIDChanging(global::System.Guid value);
        partial void OnGUIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Settings
        {
            get
            {
                return _Settings;
            }
            set
            {
                OnSettingsChanging(value);
                ReportPropertyChanging("Settings");
                _Settings = StructuralObject.SetValidValue(value, true, "Settings");
                ReportPropertyChanged("Settings");
                OnSettingsChanged();
            }
        }
        private global::System.String _Settings;
        partial void OnSettingsChanging(global::System.String value);
        partial void OnSettingsChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DateCreated
        {
            get
            {
                return _DateCreated;
            }
            set
            {
                OnDateCreatedChanging(value);
                ReportPropertyChanging("DateCreated");
                _DateCreated = StructuralObject.SetValidValue(value, "DateCreated");
                ReportPropertyChanged("DateCreated");
                OnDateCreatedChanged();
            }
        }
        private global::System.DateTime _DateCreated;
        partial void OnDateCreatedChanging(global::System.DateTime value);
        partial void OnDateCreatedChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("PortalModel", "FK_UserSettings_ClientSettingsGUID_ClientSettings_GUID", "UserSettings")]
        public EntityCollection<UserSettings> UserSettings
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<UserSettings>("PortalModel.FK_UserSettings_ClientSettingsGUID_ClientSettings_GUID", "UserSettings");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<UserSettings>("PortalModel.FK_UserSettings_ClientSettingsGUID_ClientSettings_GUID", "UserSettings", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="PortalModel", Name="Group")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Group : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Group object.
        /// </summary>
        /// <param name="gUID">Initial value of the GUID property.</param>
        /// <param name="systemPermission">Initial value of the SystemPermission property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="dateCreated">Initial value of the DateCreated property.</param>
        public static Group CreateGroup(global::System.Guid gUID, global::System.Int64 systemPermission, global::System.String name, global::System.DateTime dateCreated)
        {
            Group group = new Group();
            group.GUID = gUID;
            group.SystemPermission = systemPermission;
            group.Name = name;
            group.DateCreated = dateCreated;
            return group;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid GUID
        {
            get
            {
                return _GUID;
            }
            set
            {
                if (_GUID != value)
                {
                    OnGUIDChanging(value);
                    ReportPropertyChanging("GUID");
                    _GUID = StructuralObject.SetValidValue(value, "GUID");
                    ReportPropertyChanged("GUID");
                    OnGUIDChanged();
                }
            }
        }
        private global::System.Guid _GUID;
        partial void OnGUIDChanging(global::System.Guid value);
        partial void OnGUIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 SystemPermission
        {
            get
            {
                return _SystemPermission;
            }
            set
            {
                OnSystemPermissionChanging(value);
                ReportPropertyChanging("SystemPermission");
                _SystemPermission = StructuralObject.SetValidValue(value, "SystemPermission");
                ReportPropertyChanged("SystemPermission");
                OnSystemPermissionChanged();
            }
        }
        private global::System.Int64 _SystemPermission;
        partial void OnSystemPermissionChanging(global::System.Int64 value);
        partial void OnSystemPermissionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DateCreated
        {
            get
            {
                return _DateCreated;
            }
            set
            {
                OnDateCreatedChanging(value);
                ReportPropertyChanging("DateCreated");
                _DateCreated = StructuralObject.SetValidValue(value, "DateCreated");
                ReportPropertyChanged("DateCreated");
                OnDateCreatedChanged();
            }
        }
        private global::System.DateTime _DateCreated;
        partial void OnDateCreatedChanging(global::System.DateTime value);
        partial void OnDateCreatedChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("PortalModel", "FK_Group_User_Join_GroupGUID_Group_GUID", "Group_User_Join")]
        public EntityCollection<Group_User_Join> Group_User_Join
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Group_User_Join>("PortalModel.FK_Group_User_Join_GroupGUID_Group_GUID", "Group_User_Join");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Group_User_Join>("PortalModel.FK_Group_User_Join_GroupGUID_Group_GUID", "Group_User_Join", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="PortalModel", Name="Group_User_Join")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Group_User_Join : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Group_User_Join object.
        /// </summary>
        /// <param name="groupGUID">Initial value of the GroupGUID property.</param>
        /// <param name="userGUID">Initial value of the UserGUID property.</param>
        /// <param name="permission">Initial value of the Permission property.</param>
        /// <param name="dateCreated">Initial value of the DateCreated property.</param>
        public static Group_User_Join CreateGroup_User_Join(global::System.Guid groupGUID, global::System.Guid userGUID, global::System.Int64 permission, global::System.DateTime dateCreated)
        {
            Group_User_Join group_User_Join = new Group_User_Join();
            group_User_Join.GroupGUID = groupGUID;
            group_User_Join.UserGUID = userGUID;
            group_User_Join.Permission = permission;
            group_User_Join.DateCreated = dateCreated;
            return group_User_Join;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid GroupGUID
        {
            get
            {
                return _GroupGUID;
            }
            set
            {
                if (_GroupGUID != value)
                {
                    OnGroupGUIDChanging(value);
                    ReportPropertyChanging("GroupGUID");
                    _GroupGUID = StructuralObject.SetValidValue(value, "GroupGUID");
                    ReportPropertyChanged("GroupGUID");
                    OnGroupGUIDChanged();
                }
            }
        }
        private global::System.Guid _GroupGUID;
        partial void OnGroupGUIDChanging(global::System.Guid value);
        partial void OnGroupGUIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid UserGUID
        {
            get
            {
                return _UserGUID;
            }
            set
            {
                if (_UserGUID != value)
                {
                    OnUserGUIDChanging(value);
                    ReportPropertyChanging("UserGUID");
                    _UserGUID = StructuralObject.SetValidValue(value, "UserGUID");
                    ReportPropertyChanged("UserGUID");
                    OnUserGUIDChanged();
                }
            }
        }
        private global::System.Guid _UserGUID;
        partial void OnUserGUIDChanging(global::System.Guid value);
        partial void OnUserGUIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Permission
        {
            get
            {
                return _Permission;
            }
            set
            {
                OnPermissionChanging(value);
                ReportPropertyChanging("Permission");
                _Permission = StructuralObject.SetValidValue(value, "Permission");
                ReportPropertyChanged("Permission");
                OnPermissionChanged();
            }
        }
        private global::System.Int64 _Permission;
        partial void OnPermissionChanging(global::System.Int64 value);
        partial void OnPermissionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DateCreated
        {
            get
            {
                return _DateCreated;
            }
            set
            {
                OnDateCreatedChanging(value);
                ReportPropertyChanging("DateCreated");
                _DateCreated = StructuralObject.SetValidValue(value, "DateCreated");
                ReportPropertyChanged("DateCreated");
                OnDateCreatedChanged();
            }
        }
        private global::System.DateTime _DateCreated;
        partial void OnDateCreatedChanging(global::System.DateTime value);
        partial void OnDateCreatedChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("PortalModel", "FK_Group_User_Join_GroupGUID_Group_GUID", "Group")]
        public Group Group
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Group>("PortalModel.FK_Group_User_Join_GroupGUID_Group_GUID", "Group").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Group>("PortalModel.FK_Group_User_Join_GroupGUID_Group_GUID", "Group").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Group> GroupReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Group>("PortalModel.FK_Group_User_Join_GroupGUID_Group_GUID", "Group");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Group>("PortalModel.FK_Group_User_Join_GroupGUID_Group_GUID", "Group", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("PortalModel", "FK_Group_User_Join_UserGUID_User_GUID", "User")]
        public User User
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("PortalModel.FK_Group_User_Join_UserGUID_User_GUID", "User").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("PortalModel.FK_Group_User_Join_UserGUID_User_GUID", "User").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> UserReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("PortalModel.FK_Group_User_Join_UserGUID_User_GUID", "User");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<User>("PortalModel.FK_Group_User_Join_UserGUID_User_GUID", "User", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="PortalModel", Name="IndexSettings")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class IndexSettings : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new IndexSettings object.
        /// </summary>
        /// <param name="id">Initial value of the ID property.</param>
        /// <param name="moduleID">Initial value of the ModuleID property.</param>
        /// <param name="dateCreated">Initial value of the DateCreated property.</param>
        public static IndexSettings CreateIndexSettings(global::System.Int64 id, global::System.Int64 moduleID, global::System.DateTime dateCreated)
        {
            IndexSettings indexSettings = new IndexSettings();
            indexSettings.ID = id;
            indexSettings.ModuleID = moduleID;
            indexSettings.DateCreated = dateCreated;
            return indexSettings;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value, "ID");
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ModuleID
        {
            get
            {
                return _ModuleID;
            }
            set
            {
                OnModuleIDChanging(value);
                ReportPropertyChanging("ModuleID");
                _ModuleID = StructuralObject.SetValidValue(value, "ModuleID");
                ReportPropertyChanged("ModuleID");
                OnModuleIDChanged();
            }
        }
        private global::System.Int64 _ModuleID;
        partial void OnModuleIDChanging(global::System.Int64 value);
        partial void OnModuleIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Settings
        {
            get
            {
                return _Settings;
            }
            set
            {
                OnSettingsChanging(value);
                ReportPropertyChanging("Settings");
                _Settings = StructuralObject.SetValidValue(value, true, "Settings");
                ReportPropertyChanged("Settings");
                OnSettingsChanged();
            }
        }
        private global::System.String _Settings;
        partial void OnSettingsChanging(global::System.String value);
        partial void OnSettingsChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DateCreated
        {
            get
            {
                return _DateCreated;
            }
            set
            {
                OnDateCreatedChanging(value);
                ReportPropertyChanging("DateCreated");
                _DateCreated = StructuralObject.SetValidValue(value, "DateCreated");
                ReportPropertyChanged("DateCreated");
                OnDateCreatedChanged();
            }
        }
        private global::System.DateTime _DateCreated;
        partial void OnDateCreatedChanging(global::System.DateTime value);
        partial void OnDateCreatedChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("PortalModel", "FK_IndexSettings_ModuleID_Module_ID", "Module")]
        public Module Module
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Module>("PortalModel.FK_IndexSettings_ModuleID_Module_ID", "Module").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Module>("PortalModel.FK_IndexSettings_ModuleID_Module_ID", "Module").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Module> ModuleReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Module>("PortalModel.FK_IndexSettings_ModuleID_Module_ID", "Module");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Module>("PortalModel.FK_IndexSettings_ModuleID_Module_ID", "Module", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="PortalModel", Name="Log")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Log : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Log object.
        /// </summary>
        /// <param name="id">Initial value of the ID property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="level">Initial value of the Level property.</param>
        /// <param name="duration">Initial value of the Duration property.</param>
        /// <param name="message">Initial value of the Message property.</param>
        /// <param name="dateCreated">Initial value of the DateCreated property.</param>
        public static Log CreateLog(global::System.Int64 id, global::System.String name, global::System.String level, global::System.Double duration, global::System.String message, global::System.DateTime dateCreated)
        {
            Log log = new Log();
            log.ID = id;
            log.Name = name;
            log.Level = level;
            log.Duration = duration;
            log.Message = message;
            log.DateCreated = dateCreated;
            return log;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value, "ID");
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Level
        {
            get
            {
                return _Level;
            }
            set
            {
                OnLevelChanging(value);
                ReportPropertyChanging("Level");
                _Level = StructuralObject.SetValidValue(value, false, "Level");
                ReportPropertyChanged("Level");
                OnLevelChanged();
            }
        }
        private global::System.String _Level;
        partial void OnLevelChanging(global::System.String value);
        partial void OnLevelChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> SessionGUID
        {
            get
            {
                return _SessionGUID;
            }
            set
            {
                OnSessionGUIDChanging(value);
                ReportPropertyChanging("SessionGUID");
                _SessionGUID = StructuralObject.SetValidValue(value, "SessionGUID");
                ReportPropertyChanged("SessionGUID");
                OnSessionGUIDChanged();
            }
        }
        private Nullable<global::System.Guid> _SessionGUID;
        partial void OnSessionGUIDChanging(Nullable<global::System.Guid> value);
        partial void OnSessionGUIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Duration
        {
            get
            {
                return _Duration;
            }
            set
            {
                OnDurationChanging(value);
                ReportPropertyChanging("Duration");
                _Duration = StructuralObject.SetValidValue(value, "Duration");
                ReportPropertyChanged("Duration");
                OnDurationChanged();
            }
        }
        private global::System.Double _Duration;
        partial void OnDurationChanging(global::System.Double value);
        partial void OnDurationChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Message
        {
            get
            {
                return _Message;
            }
            set
            {
                OnMessageChanging(value);
                ReportPropertyChanging("Message");
                _Message = StructuralObject.SetValidValue(value, false, "Message");
                ReportPropertyChanged("Message");
                OnMessageChanged();
            }
        }
        private global::System.String _Message;
        partial void OnMessageChanging(global::System.String value);
        partial void OnMessageChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DateCreated
        {
            get
            {
                return _DateCreated;
            }
            set
            {
                OnDateCreatedChanging(value);
                ReportPropertyChanging("DateCreated");
                _DateCreated = StructuralObject.SetValidValue(value, "DateCreated");
                ReportPropertyChanged("DateCreated");
                OnDateCreatedChanged();
            }
        }
        private global::System.DateTime _DateCreated;
        partial void OnDateCreatedChanging(global::System.DateTime value);
        partial void OnDateCreatedChanged();

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="PortalModel", Name="Module")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Module : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Module object.
        /// </summary>
        /// <param name="id">Initial value of the ID property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="dateCreated">Initial value of the DateCreated property.</param>
        public static Module CreateModule(global::System.Int64 id, global::System.String name, global::System.DateTime dateCreated)
        {
            Module module = new Module();
            module.ID = id;
            module.Name = name;
            module.DateCreated = dateCreated;
            return module;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value, "ID");
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Configuration
        {
            get
            {
                return _Configuration;
            }
            set
            {
                OnConfigurationChanging(value);
                ReportPropertyChanging("Configuration");
                _Configuration = StructuralObject.SetValidValue(value, true, "Configuration");
                ReportPropertyChanged("Configuration");
                OnConfigurationChanged();
            }
        }
        private global::System.String _Configuration;
        partial void OnConfigurationChanging(global::System.String value);
        partial void OnConfigurationChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DateCreated
        {
            get
            {
                return _DateCreated;
            }
            set
            {
                OnDateCreatedChanging(value);
                ReportPropertyChanging("DateCreated");
                _DateCreated = StructuralObject.SetValidValue(value, "DateCreated");
                ReportPropertyChanged("DateCreated");
                OnDateCreatedChanged();
            }
        }
        private global::System.DateTime _DateCreated;
        partial void OnDateCreatedChanging(global::System.DateTime value);
        partial void OnDateCreatedChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("PortalModel", "FK_IndexSettings_ModuleID_Module_ID", "IndexSettings")]
        public EntityCollection<IndexSettings> IndexSettings
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<IndexSettings>("PortalModel.FK_IndexSettings_ModuleID_Module_ID", "IndexSettings");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<IndexSettings>("PortalModel.FK_IndexSettings_ModuleID_Module_ID", "IndexSettings", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="PortalModel", Name="Permission")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Permission : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Permission object.
        /// </summary>
        /// <param name="tableIdentifier">Initial value of the TableIdentifier property.</param>
        /// <param name="permission1">Initial value of the Permission1 property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static Permission CreatePermission(global::System.String tableIdentifier, global::System.Int64 permission1, global::System.String name)
        {
            Permission permission = new Permission();
            permission.TableIdentifier = tableIdentifier;
            permission.Permission1 = permission1;
            permission.Name = name;
            return permission;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String TableIdentifier
        {
            get
            {
                return _TableIdentifier;
            }
            set
            {
                if (_TableIdentifier != value)
                {
                    OnTableIdentifierChanging(value);
                    ReportPropertyChanging("TableIdentifier");
                    _TableIdentifier = StructuralObject.SetValidValue(value, false, "TableIdentifier");
                    ReportPropertyChanged("TableIdentifier");
                    OnTableIdentifierChanged();
                }
            }
        }
        private global::System.String _TableIdentifier;
        partial void OnTableIdentifierChanging(global::System.String value);
        partial void OnTableIdentifierChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Permission1
        {
            get
            {
                return _Permission1;
            }
            set
            {
                if (_Permission1 != value)
                {
                    OnPermission1Changing(value);
                    ReportPropertyChanging("Permission1");
                    _Permission1 = StructuralObject.SetValidValue(value, "Permission1");
                    ReportPropertyChanged("Permission1");
                    OnPermission1Changed();
                }
            }
        }
        private global::System.Int64 _Permission1;
        partial void OnPermission1Changing(global::System.Int64 value);
        partial void OnPermission1Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true, "Description");
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="PortalModel", Name="Session")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Session : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Session object.
        /// </summary>
        /// <param name="gUID">Initial value of the GUID property.</param>
        /// <param name="userGUID">Initial value of the UserGUID property.</param>
        /// <param name="dateCreated">Initial value of the DateCreated property.</param>
        public static Session CreateSession(global::System.Guid gUID, global::System.Guid userGUID, global::System.DateTime dateCreated)
        {
            Session session = new Session();
            session.GUID = gUID;
            session.UserGUID = userGUID;
            session.DateCreated = dateCreated;
            return session;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid GUID
        {
            get
            {
                return _GUID;
            }
            set
            {
                if (_GUID != value)
                {
                    OnGUIDChanging(value);
                    ReportPropertyChanging("GUID");
                    _GUID = StructuralObject.SetValidValue(value, "GUID");
                    ReportPropertyChanged("GUID");
                    OnGUIDChanged();
                }
            }
        }
        private global::System.Guid _GUID;
        partial void OnGUIDChanging(global::System.Guid value);
        partial void OnGUIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid UserGUID
        {
            get
            {
                return _UserGUID;
            }
            set
            {
                OnUserGUIDChanging(value);
                ReportPropertyChanging("UserGUID");
                _UserGUID = StructuralObject.SetValidValue(value, "UserGUID");
                ReportPropertyChanged("UserGUID");
                OnUserGUIDChanged();
            }
        }
        private global::System.Guid _UserGUID;
        partial void OnUserGUIDChanging(global::System.Guid value);
        partial void OnUserGUIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DateCreated
        {
            get
            {
                return _DateCreated;
            }
            set
            {
                OnDateCreatedChanging(value);
                ReportPropertyChanging("DateCreated");
                _DateCreated = StructuralObject.SetValidValue(value, "DateCreated");
                ReportPropertyChanged("DateCreated");
                OnDateCreatedChanged();
            }
        }
        private global::System.DateTime _DateCreated;
        partial void OnDateCreatedChanging(global::System.DateTime value);
        partial void OnDateCreatedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DateModified
        {
            get
            {
                return _DateModified;
            }
            set
            {
                OnDateModifiedChanging(value);
                ReportPropertyChanging("DateModified");
                _DateModified = StructuralObject.SetValidValue(value, "DateModified");
                ReportPropertyChanged("DateModified");
                OnDateModifiedChanged();
            }
        }
        private Nullable<global::System.DateTime> _DateModified;
        partial void OnDateModifiedChanging(Nullable<global::System.DateTime> value);
        partial void OnDateModifiedChanged();

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="PortalModel", Name="SessionInfo")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class SessionInfo : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new SessionInfo object.
        /// </summary>
        /// <param name="sessionGUID">Initial value of the SessionGUID property.</param>
        /// <param name="userGUID">Initial value of the UserGUID property.</param>
        /// <param name="dateCreated">Initial value of the DateCreated property.</param>
        public static SessionInfo CreateSessionInfo(global::System.Guid sessionGUID, global::System.Guid userGUID, global::System.DateTime dateCreated)
        {
            SessionInfo sessionInfo = new SessionInfo();
            sessionInfo.SessionGUID = sessionGUID;
            sessionInfo.UserGUID = userGUID;
            sessionInfo.DateCreated = dateCreated;
            return sessionInfo;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid SessionGUID
        {
            get
            {
                return _SessionGUID;
            }
            set
            {
                if (_SessionGUID != value)
                {
                    OnSessionGUIDChanging(value);
                    ReportPropertyChanging("SessionGUID");
                    _SessionGUID = StructuralObject.SetValidValue(value, "SessionGUID");
                    ReportPropertyChanged("SessionGUID");
                    OnSessionGUIDChanged();
                }
            }
        }
        private global::System.Guid _SessionGUID;
        partial void OnSessionGUIDChanging(global::System.Guid value);
        partial void OnSessionGUIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid UserGUID
        {
            get
            {
                return _UserGUID;
            }
            set
            {
                if (_UserGUID != value)
                {
                    OnUserGUIDChanging(value);
                    ReportPropertyChanging("UserGUID");
                    _UserGUID = StructuralObject.SetValidValue(value, "UserGUID");
                    ReportPropertyChanged("UserGUID");
                    OnUserGUIDChanged();
                }
            }
        }
        private global::System.Guid _UserGUID;
        partial void OnUserGUIDChanging(global::System.Guid value);
        partial void OnUserGUIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DateCreated
        {
            get
            {
                return _DateCreated;
            }
            set
            {
                if (_DateCreated != value)
                {
                    OnDateCreatedChanging(value);
                    ReportPropertyChanging("DateCreated");
                    _DateCreated = StructuralObject.SetValidValue(value, "DateCreated");
                    ReportPropertyChanged("DateCreated");
                    OnDateCreatedChanged();
                }
            }
        }
        private global::System.DateTime _DateCreated;
        partial void OnDateCreatedChanging(global::System.DateTime value);
        partial void OnDateCreatedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DateModified
        {
            get
            {
                return _DateModified;
            }
            set
            {
                OnDateModifiedChanging(value);
                ReportPropertyChanging("DateModified");
                _DateModified = StructuralObject.SetValidValue(value, "DateModified");
                ReportPropertyChanged("DateModified");
                OnDateModifiedChanged();
            }
        }
        private Nullable<global::System.DateTime> _DateModified;
        partial void OnDateModifiedChanging(Nullable<global::System.DateTime> value);
        partial void OnDateModifiedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> MinutesSinceRenewal
        {
            get
            {
                return _MinutesSinceRenewal;
            }
            set
            {
                OnMinutesSinceRenewalChanging(value);
                ReportPropertyChanging("MinutesSinceRenewal");
                _MinutesSinceRenewal = StructuralObject.SetValidValue(value, "MinutesSinceRenewal");
                ReportPropertyChanged("MinutesSinceRenewal");
                OnMinutesSinceRenewalChanged();
            }
        }
        private Nullable<global::System.Int64> _MinutesSinceRenewal;
        partial void OnMinutesSinceRenewalChanging(Nullable<global::System.Int64> value);
        partial void OnMinutesSinceRenewalChanged();

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="PortalModel", Name="Subscription")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Subscription : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Subscription object.
        /// </summary>
        /// <param name="gUID">Initial value of the GUID property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="dateCreated">Initial value of the DateCreated property.</param>
        public static Subscription CreateSubscription(global::System.Guid gUID, global::System.String name, global::System.DateTime dateCreated)
        {
            Subscription subscription = new Subscription();
            subscription.GUID = gUID;
            subscription.Name = name;
            subscription.DateCreated = dateCreated;
            return subscription;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid GUID
        {
            get
            {
                return _GUID;
            }
            set
            {
                if (_GUID != value)
                {
                    OnGUIDChanging(value);
                    ReportPropertyChanging("GUID");
                    _GUID = StructuralObject.SetValidValue(value, "GUID");
                    ReportPropertyChanged("GUID");
                    OnGUIDChanged();
                }
            }
        }
        private global::System.Guid _GUID;
        partial void OnGUIDChanging(global::System.Guid value);
        partial void OnGUIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DateCreated
        {
            get
            {
                return _DateCreated;
            }
            set
            {
                OnDateCreatedChanging(value);
                ReportPropertyChanging("DateCreated");
                _DateCreated = StructuralObject.SetValidValue(value, "DateCreated");
                ReportPropertyChanged("DateCreated");
                OnDateCreatedChanged();
            }
        }
        private global::System.DateTime _DateCreated;
        partial void OnDateCreatedChanging(global::System.DateTime value);
        partial void OnDateCreatedChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("PortalModel", "FK_Subscription_User_Join_SubscriptionGUID_Subscription_GUID", "Subscription_User_Join")]
        public EntityCollection<Subscription_User_Join> Subscription_User_Join
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Subscription_User_Join>("PortalModel.FK_Subscription_User_Join_SubscriptionGUID_Subscription_GUID", "Subscription_User_Join");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Subscription_User_Join>("PortalModel.FK_Subscription_User_Join_SubscriptionGUID_Subscription_GUID", "Subscription_User_Join", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="PortalModel", Name="Subscription_User_Join")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Subscription_User_Join : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Subscription_User_Join object.
        /// </summary>
        /// <param name="subscriptionGUID">Initial value of the SubscriptionGUID property.</param>
        /// <param name="userGUID">Initial value of the UserGUID property.</param>
        /// <param name="permission">Initial value of the Permission property.</param>
        /// <param name="dateCreated">Initial value of the DateCreated property.</param>
        public static Subscription_User_Join CreateSubscription_User_Join(global::System.Guid subscriptionGUID, global::System.Guid userGUID, global::System.Int64 permission, global::System.DateTime dateCreated)
        {
            Subscription_User_Join subscription_User_Join = new Subscription_User_Join();
            subscription_User_Join.SubscriptionGUID = subscriptionGUID;
            subscription_User_Join.UserGUID = userGUID;
            subscription_User_Join.Permission = permission;
            subscription_User_Join.DateCreated = dateCreated;
            return subscription_User_Join;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid SubscriptionGUID
        {
            get
            {
                return _SubscriptionGUID;
            }
            set
            {
                if (_SubscriptionGUID != value)
                {
                    OnSubscriptionGUIDChanging(value);
                    ReportPropertyChanging("SubscriptionGUID");
                    _SubscriptionGUID = StructuralObject.SetValidValue(value, "SubscriptionGUID");
                    ReportPropertyChanged("SubscriptionGUID");
                    OnSubscriptionGUIDChanged();
                }
            }
        }
        private global::System.Guid _SubscriptionGUID;
        partial void OnSubscriptionGUIDChanging(global::System.Guid value);
        partial void OnSubscriptionGUIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid UserGUID
        {
            get
            {
                return _UserGUID;
            }
            set
            {
                if (_UserGUID != value)
                {
                    OnUserGUIDChanging(value);
                    ReportPropertyChanging("UserGUID");
                    _UserGUID = StructuralObject.SetValidValue(value, "UserGUID");
                    ReportPropertyChanged("UserGUID");
                    OnUserGUIDChanged();
                }
            }
        }
        private global::System.Guid _UserGUID;
        partial void OnUserGUIDChanging(global::System.Guid value);
        partial void OnUserGUIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Permission
        {
            get
            {
                return _Permission;
            }
            set
            {
                OnPermissionChanging(value);
                ReportPropertyChanging("Permission");
                _Permission = StructuralObject.SetValidValue(value, "Permission");
                ReportPropertyChanged("Permission");
                OnPermissionChanged();
            }
        }
        private global::System.Int64 _Permission;
        partial void OnPermissionChanging(global::System.Int64 value);
        partial void OnPermissionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DateCreated
        {
            get
            {
                return _DateCreated;
            }
            set
            {
                OnDateCreatedChanging(value);
                ReportPropertyChanging("DateCreated");
                _DateCreated = StructuralObject.SetValidValue(value, "DateCreated");
                ReportPropertyChanged("DateCreated");
                OnDateCreatedChanged();
            }
        }
        private global::System.DateTime _DateCreated;
        partial void OnDateCreatedChanging(global::System.DateTime value);
        partial void OnDateCreatedChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("PortalModel", "FK_Subscription_User_Join_SubscriptionGUID_Subscription_GUID", "Subscription")]
        public Subscription Subscription
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Subscription>("PortalModel.FK_Subscription_User_Join_SubscriptionGUID_Subscription_GUID", "Subscription").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Subscription>("PortalModel.FK_Subscription_User_Join_SubscriptionGUID_Subscription_GUID", "Subscription").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Subscription> SubscriptionReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Subscription>("PortalModel.FK_Subscription_User_Join_SubscriptionGUID_Subscription_GUID", "Subscription");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Subscription>("PortalModel.FK_Subscription_User_Join_SubscriptionGUID_Subscription_GUID", "Subscription", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("PortalModel", "FK_Subscription_User_Join_UserGUID_User_GUID", "User")]
        public User User
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("PortalModel.FK_Subscription_User_Join_UserGUID_User_GUID", "User").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("PortalModel.FK_Subscription_User_Join_UserGUID_User_GUID", "User").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> UserReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("PortalModel.FK_Subscription_User_Join_UserGUID_User_GUID", "User");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<User>("PortalModel.FK_Subscription_User_Join_UserGUID_User_GUID", "User", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="PortalModel", Name="SubscriptionInfo")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class SubscriptionInfo : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new SubscriptionInfo object.
        /// </summary>
        /// <param name="gUID">Initial value of the GUID property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="dateCreated">Initial value of the DateCreated property.</param>
        public static SubscriptionInfo CreateSubscriptionInfo(global::System.Guid gUID, global::System.String name, global::System.DateTime dateCreated)
        {
            SubscriptionInfo subscriptionInfo = new SubscriptionInfo();
            subscriptionInfo.GUID = gUID;
            subscriptionInfo.Name = name;
            subscriptionInfo.DateCreated = dateCreated;
            return subscriptionInfo;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid GUID
        {
            get
            {
                return _GUID;
            }
            set
            {
                if (_GUID != value)
                {
                    OnGUIDChanging(value);
                    ReportPropertyChanging("GUID");
                    _GUID = StructuralObject.SetValidValue(value, "GUID");
                    ReportPropertyChanged("GUID");
                    OnGUIDChanged();
                }
            }
        }
        private global::System.Guid _GUID;
        partial void OnGUIDChanging(global::System.Guid value);
        partial void OnGUIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                if (_Name != value)
                {
                    OnNameChanging(value);
                    ReportPropertyChanging("Name");
                    _Name = StructuralObject.SetValidValue(value, false, "Name");
                    ReportPropertyChanged("Name");
                    OnNameChanged();
                }
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> UserGUID
        {
            get
            {
                return _UserGUID;
            }
            set
            {
                OnUserGUIDChanging(value);
                ReportPropertyChanging("UserGUID");
                _UserGUID = StructuralObject.SetValidValue(value, "UserGUID");
                ReportPropertyChanged("UserGUID");
                OnUserGUIDChanged();
            }
        }
        private Nullable<global::System.Guid> _UserGUID;
        partial void OnUserGUIDChanging(Nullable<global::System.Guid> value);
        partial void OnUserGUIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> Permission
        {
            get
            {
                return _Permission;
            }
            set
            {
                OnPermissionChanging(value);
                ReportPropertyChanging("Permission");
                _Permission = StructuralObject.SetValidValue(value, "Permission");
                ReportPropertyChanged("Permission");
                OnPermissionChanged();
            }
        }
        private Nullable<global::System.Int64> _Permission;
        partial void OnPermissionChanging(Nullable<global::System.Int64> value);
        partial void OnPermissionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DateCreated
        {
            get
            {
                return _DateCreated;
            }
            set
            {
                if (_DateCreated != value)
                {
                    OnDateCreatedChanging(value);
                    ReportPropertyChanging("DateCreated");
                    _DateCreated = StructuralObject.SetValidValue(value, "DateCreated");
                    ReportPropertyChanged("DateCreated");
                    OnDateCreatedChanged();
                }
            }
        }
        private global::System.DateTime _DateCreated;
        partial void OnDateCreatedChanging(global::System.DateTime value);
        partial void OnDateCreatedChanged();

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="PortalModel", Name="Ticket")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Ticket : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Ticket object.
        /// </summary>
        /// <param name="gUID">Initial value of the GUID property.</param>
        /// <param name="ticketTypeID">Initial value of the TicketTypeID property.</param>
        /// <param name="dateCreated">Initial value of the DateCreated property.</param>
        public static Ticket CreateTicket(global::System.Guid gUID, global::System.Int64 ticketTypeID, global::System.DateTime dateCreated)
        {
            Ticket ticket = new Ticket();
            ticket.GUID = gUID;
            ticket.TicketTypeID = ticketTypeID;
            ticket.DateCreated = dateCreated;
            return ticket;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid GUID
        {
            get
            {
                return _GUID;
            }
            set
            {
                if (_GUID != value)
                {
                    OnGUIDChanging(value);
                    ReportPropertyChanging("GUID");
                    _GUID = StructuralObject.SetValidValue(value, "GUID");
                    ReportPropertyChanged("GUID");
                    OnGUIDChanged();
                }
            }
        }
        private global::System.Guid _GUID;
        partial void OnGUIDChanging(global::System.Guid value);
        partial void OnGUIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 TicketTypeID
        {
            get
            {
                return _TicketTypeID;
            }
            set
            {
                OnTicketTypeIDChanging(value);
                ReportPropertyChanging("TicketTypeID");
                _TicketTypeID = StructuralObject.SetValidValue(value, "TicketTypeID");
                ReportPropertyChanged("TicketTypeID");
                OnTicketTypeIDChanged();
            }
        }
        private global::System.Int64 _TicketTypeID;
        partial void OnTicketTypeIDChanging(global::System.Int64 value);
        partial void OnTicketTypeIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String XML
        {
            get
            {
                return _XML;
            }
            set
            {
                OnXMLChanging(value);
                ReportPropertyChanging("XML");
                _XML = StructuralObject.SetValidValue(value, true, "XML");
                ReportPropertyChanged("XML");
                OnXMLChanged();
            }
        }
        private global::System.String _XML;
        partial void OnXMLChanging(global::System.String value);
        partial void OnXMLChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Callback
        {
            get
            {
                return _Callback;
            }
            set
            {
                OnCallbackChanging(value);
                ReportPropertyChanging("Callback");
                _Callback = StructuralObject.SetValidValue(value, true, "Callback");
                ReportPropertyChanged("Callback");
                OnCallbackChanged();
            }
        }
        private global::System.String _Callback;
        partial void OnCallbackChanging(global::System.String value);
        partial void OnCallbackChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DateCreated
        {
            get
            {
                return _DateCreated;
            }
            set
            {
                OnDateCreatedChanging(value);
                ReportPropertyChanging("DateCreated");
                _DateCreated = StructuralObject.SetValidValue(value, "DateCreated");
                ReportPropertyChanged("DateCreated");
                OnDateCreatedChanged();
            }
        }
        private global::System.DateTime _DateCreated;
        partial void OnDateCreatedChanging(global::System.DateTime value);
        partial void OnDateCreatedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DateUsed
        {
            get
            {
                return _DateUsed;
            }
            set
            {
                OnDateUsedChanging(value);
                ReportPropertyChanging("DateUsed");
                _DateUsed = StructuralObject.SetValidValue(value, "DateUsed");
                ReportPropertyChanged("DateUsed");
                OnDateUsedChanged();
            }
        }
        private Nullable<global::System.DateTime> _DateUsed;
        partial void OnDateUsedChanging(Nullable<global::System.DateTime> value);
        partial void OnDateUsedChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("PortalModel", "FK_Ticket_TicketTypeID_TicketType_ID", "TicketType")]
        public TicketType TicketType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TicketType>("PortalModel.FK_Ticket_TicketTypeID_TicketType_ID", "TicketType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TicketType>("PortalModel.FK_Ticket_TicketTypeID_TicketType_ID", "TicketType").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<TicketType> TicketTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TicketType>("PortalModel.FK_Ticket_TicketTypeID_TicketType_ID", "TicketType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<TicketType>("PortalModel.FK_Ticket_TicketTypeID_TicketType_ID", "TicketType", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="PortalModel", Name="TicketType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class TicketType : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new TicketType object.
        /// </summary>
        /// <param name="id">Initial value of the ID property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static TicketType CreateTicketType(global::System.Int64 id, global::System.String name)
        {
            TicketType ticketType = new TicketType();
            ticketType.ID = id;
            ticketType.Name = name;
            return ticketType;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value, "ID");
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("PortalModel", "FK_Ticket_TicketTypeID_TicketType_ID", "Ticket")]
        public EntityCollection<Ticket> Ticket
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Ticket>("PortalModel.FK_Ticket_TicketTypeID_TicketType_ID", "Ticket");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Ticket>("PortalModel.FK_Ticket_TicketTypeID_TicketType_ID", "Ticket", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="PortalModel", Name="User")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class User : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new User object.
        /// </summary>
        /// <param name="gUID">Initial value of the GUID property.</param>
        /// <param name="email">Initial value of the Email property.</param>
        /// <param name="dateCreated">Initial value of the DateCreated property.</param>
        public static User CreateUser(global::System.Guid gUID, global::System.String email, global::System.DateTime dateCreated)
        {
            User user = new User();
            user.GUID = gUID;
            user.Email = email;
            user.DateCreated = dateCreated;
            return user;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid GUID
        {
            get
            {
                return _GUID;
            }
            set
            {
                if (_GUID != value)
                {
                    OnGUIDChanging(value);
                    ReportPropertyChanging("GUID");
                    _GUID = StructuralObject.SetValidValue(value, "GUID");
                    ReportPropertyChanged("GUID");
                    OnGUIDChanged();
                }
            }
        }
        private global::System.Guid _GUID;
        partial void OnGUIDChanging(global::System.Guid value);
        partial void OnGUIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Email
        {
            get
            {
                return _Email;
            }
            set
            {
                OnEmailChanging(value);
                ReportPropertyChanging("Email");
                _Email = StructuralObject.SetValidValue(value, false, "Email");
                ReportPropertyChanged("Email");
                OnEmailChanged();
            }
        }
        private global::System.String _Email;
        partial void OnEmailChanging(global::System.String value);
        partial void OnEmailChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DateCreated
        {
            get
            {
                return _DateCreated;
            }
            set
            {
                OnDateCreatedChanging(value);
                ReportPropertyChanging("DateCreated");
                _DateCreated = StructuralObject.SetValidValue(value, "DateCreated");
                ReportPropertyChanged("DateCreated");
                OnDateCreatedChanged();
            }
        }
        private global::System.DateTime _DateCreated;
        partial void OnDateCreatedChanging(global::System.DateTime value);
        partial void OnDateCreatedChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("PortalModel", "FK_Group_User_Join_UserGUID_User_GUID", "Group_User_Join")]
        public EntityCollection<Group_User_Join> Group_User_Join
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Group_User_Join>("PortalModel.FK_Group_User_Join_UserGUID_User_GUID", "Group_User_Join");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Group_User_Join>("PortalModel.FK_Group_User_Join_UserGUID_User_GUID", "Group_User_Join", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("PortalModel", "FK_Subscription_User_Join_UserGUID_User_GUID", "Subscription_User_Join")]
        public EntityCollection<Subscription_User_Join> Subscription_User_Join
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Subscription_User_Join>("PortalModel.FK_Subscription_User_Join_UserGUID_User_GUID", "Subscription_User_Join");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Subscription_User_Join>("PortalModel.FK_Subscription_User_Join_UserGUID_User_GUID", "Subscription_User_Join", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("PortalModel", "FK_UserSettings_UserGUID_User_GUID", "UserSettings")]
        public EntityCollection<UserSettings> UserSettings
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<UserSettings>("PortalModel.FK_UserSettings_UserGUID_User_GUID", "UserSettings");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<UserSettings>("PortalModel.FK_UserSettings_UserGUID_User_GUID", "UserSettings", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="PortalModel", Name="UserInfo")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class UserInfo : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new UserInfo object.
        /// </summary>
        /// <param name="gUID">Initial value of the GUID property.</param>
        /// <param name="email">Initial value of the Email property.</param>
        public static UserInfo CreateUserInfo(global::System.Guid gUID, global::System.String email)
        {
            UserInfo userInfo = new UserInfo();
            userInfo.GUID = gUID;
            userInfo.Email = email;
            return userInfo;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid GUID
        {
            get
            {
                return _GUID;
            }
            set
            {
                if (_GUID != value)
                {
                    OnGUIDChanging(value);
                    ReportPropertyChanging("GUID");
                    _GUID = StructuralObject.SetValidValue(value, "GUID");
                    ReportPropertyChanged("GUID");
                    OnGUIDChanged();
                }
            }
        }
        private global::System.Guid _GUID;
        partial void OnGUIDChanging(global::System.Guid value);
        partial void OnGUIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> SessionGUID
        {
            get
            {
                return _SessionGUID;
            }
            set
            {
                OnSessionGUIDChanging(value);
                ReportPropertyChanging("SessionGUID");
                _SessionGUID = StructuralObject.SetValidValue(value, "SessionGUID");
                ReportPropertyChanged("SessionGUID");
                OnSessionGUIDChanged();
            }
        }
        private Nullable<global::System.Guid> _SessionGUID;
        partial void OnSessionGUIDChanging(Nullable<global::System.Guid> value);
        partial void OnSessionGUIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> SystemPermission
        {
            get
            {
                return _SystemPermission;
            }
            set
            {
                OnSystemPermissionChanging(value);
                ReportPropertyChanging("SystemPermission");
                _SystemPermission = StructuralObject.SetValidValue(value, "SystemPermission");
                ReportPropertyChanged("SystemPermission");
                OnSystemPermissionChanged();
            }
        }
        private Nullable<global::System.Int64> _SystemPermission;
        partial void OnSystemPermissionChanging(Nullable<global::System.Int64> value);
        partial void OnSystemPermissionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Email
        {
            get
            {
                return _Email;
            }
            set
            {
                if (_Email != value)
                {
                    OnEmailChanging(value);
                    ReportPropertyChanging("Email");
                    _Email = StructuralObject.SetValidValue(value, false, "Email");
                    ReportPropertyChanged("Email");
                    OnEmailChanged();
                }
            }
        }
        private global::System.String _Email;
        partial void OnEmailChanging(global::System.String value);
        partial void OnEmailChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DateModified
        {
            get
            {
                return _DateModified;
            }
            set
            {
                OnDateModifiedChanging(value);
                ReportPropertyChanging("DateModified");
                _DateModified = StructuralObject.SetValidValue(value, "DateModified");
                ReportPropertyChanged("DateModified");
                OnDateModifiedChanged();
            }
        }
        private Nullable<global::System.DateTime> _DateModified;
        partial void OnDateModifiedChanging(Nullable<global::System.DateTime> value);
        partial void OnDateModifiedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> SessionDateCreated
        {
            get
            {
                return _SessionDateCreated;
            }
            set
            {
                OnSessionDateCreatedChanging(value);
                ReportPropertyChanging("SessionDateCreated");
                _SessionDateCreated = StructuralObject.SetValidValue(value, "SessionDateCreated");
                ReportPropertyChanged("SessionDateCreated");
                OnSessionDateCreatedChanged();
            }
        }
        private Nullable<global::System.DateTime> _SessionDateCreated;
        partial void OnSessionDateCreatedChanging(Nullable<global::System.DateTime> value);
        partial void OnSessionDateCreatedChanged();

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="PortalModel", Name="UserSettings")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class UserSettings : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new UserSettings object.
        /// </summary>
        /// <param name="clientSettingsGUID">Initial value of the ClientSettingsGUID property.</param>
        /// <param name="userGUID">Initial value of the UserGUID property.</param>
        /// <param name="dateCreated">Initial value of the DateCreated property.</param>
        public static UserSettings CreateUserSettings(global::System.Guid clientSettingsGUID, global::System.Guid userGUID, global::System.DateTime dateCreated)
        {
            UserSettings userSettings = new UserSettings();
            userSettings.ClientSettingsGUID = clientSettingsGUID;
            userSettings.UserGUID = userGUID;
            userSettings.DateCreated = dateCreated;
            return userSettings;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ClientSettingsGUID
        {
            get
            {
                return _ClientSettingsGUID;
            }
            set
            {
                if (_ClientSettingsGUID != value)
                {
                    OnClientSettingsGUIDChanging(value);
                    ReportPropertyChanging("ClientSettingsGUID");
                    _ClientSettingsGUID = StructuralObject.SetValidValue(value, "ClientSettingsGUID");
                    ReportPropertyChanged("ClientSettingsGUID");
                    OnClientSettingsGUIDChanged();
                }
            }
        }
        private global::System.Guid _ClientSettingsGUID;
        partial void OnClientSettingsGUIDChanging(global::System.Guid value);
        partial void OnClientSettingsGUIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid UserGUID
        {
            get
            {
                return _UserGUID;
            }
            set
            {
                if (_UserGUID != value)
                {
                    OnUserGUIDChanging(value);
                    ReportPropertyChanging("UserGUID");
                    _UserGUID = StructuralObject.SetValidValue(value, "UserGUID");
                    ReportPropertyChanged("UserGUID");
                    OnUserGUIDChanged();
                }
            }
        }
        private global::System.Guid _UserGUID;
        partial void OnUserGUIDChanging(global::System.Guid value);
        partial void OnUserGUIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Settings
        {
            get
            {
                return _Settings;
            }
            set
            {
                OnSettingsChanging(value);
                ReportPropertyChanging("Settings");
                _Settings = StructuralObject.SetValidValue(value, true, "Settings");
                ReportPropertyChanged("Settings");
                OnSettingsChanged();
            }
        }
        private global::System.String _Settings;
        partial void OnSettingsChanging(global::System.String value);
        partial void OnSettingsChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DateCreated
        {
            get
            {
                return _DateCreated;
            }
            set
            {
                OnDateCreatedChanging(value);
                ReportPropertyChanging("DateCreated");
                _DateCreated = StructuralObject.SetValidValue(value, "DateCreated");
                ReportPropertyChanged("DateCreated");
                OnDateCreatedChanged();
            }
        }
        private global::System.DateTime _DateCreated;
        partial void OnDateCreatedChanging(global::System.DateTime value);
        partial void OnDateCreatedChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("PortalModel", "FK_UserSettings_ClientSettingsGUID_ClientSettings_GUID", "ClientSettings")]
        public ClientSettings ClientSettings
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ClientSettings>("PortalModel.FK_UserSettings_ClientSettingsGUID_ClientSettings_GUID", "ClientSettings").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ClientSettings>("PortalModel.FK_UserSettings_ClientSettingsGUID_ClientSettings_GUID", "ClientSettings").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<ClientSettings> ClientSettingsReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ClientSettings>("PortalModel.FK_UserSettings_ClientSettingsGUID_ClientSettings_GUID", "ClientSettings");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<ClientSettings>("PortalModel.FK_UserSettings_ClientSettingsGUID_ClientSettings_GUID", "ClientSettings", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("PortalModel", "FK_UserSettings_UserGUID_User_GUID", "User")]
        public User User
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("PortalModel.FK_UserSettings_UserGUID_User_GUID", "User").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("PortalModel.FK_UserSettings_UserGUID_User_GUID", "User").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> UserReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("PortalModel.FK_UserSettings_UserGUID_User_GUID", "User");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<User>("PortalModel.FK_UserSettings_UserGUID_User_GUID", "User", value);
                }
            }
        }

        #endregion

    }

    #endregion

}
